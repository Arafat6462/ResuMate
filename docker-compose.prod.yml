services:
  backend:
    # The image name and tag are now dynamic. The tag will be passed in
    # as an environment variable from our CI/CD script.
    image: arafat6462/resumate:${IMAGE_TAG:-latest}
    container_name: resumate_backend_prod
    restart: always # Ensures the container restarts if it crashes or the server reboots
    # The command is now taken from the Dockerfile's CMD instruction.
    # We remove the local volume mount to ensure we run the code baked into the image.
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      # These will be loaded from a .env file on the server
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - PORT=${PORT}

  db:
    image: postgres:16
    container_name: resumate_db_prod
    restart: always
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data_prod:
