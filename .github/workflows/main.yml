
# This is the name of our workflow. It will be displayed in the "Actions" tab of your GitHub repository.
name: Django CI/CD

# This section defines the trigger for the workflow.
# We are telling GitHub to run this pipeline automatically on every "push" event to the "master" branch.
on:
  push:
    branches: [ "master" ]

# This section defines the jobs that will be executed as part of the pipeline.
jobs:
  #--------------------------------------------------
  # JOB 1: Continuous Integration (CI)
  # The purpose of this job is to run tests and linting to ensure code quality.
  #--------------------------------------------------
  ci:
    # This sets the name of the job that you'll see in the GitHub UI.
    name: Continuous Integration

    # This specifies the type of machine to run the job on. "ubuntu-latest" is a standard, reliable choice.
    runs-on: ubuntu-latest

    # These are the individual steps that make up the CI job. They run in sequence.
    steps:
      # Step 1: Check out the code
      # This is a standard action that downloads your repository's code onto the runner machine.
      - name: Check out code
        uses: actions/checkout@v3

      # Step 2: Build the Docker containers
      # This command uses your docker-compose.yml file to build the images for your services (backend and db).
      # It doesn't run them yet, it just builds them. This is a crucial check to ensure your Dockerfile is valid.
      - name: Build and start services
        run: docker compose up --build -d

      # Step 3: Run tests using pytest
      # This command starts the services and executes the tests inside the "backend" container.
      # The "--no-deps" flag tells docker-compose to not rebuild the image, as we just did that in the previous step.
      # The "pytest" at the end is the command that is run inside the container.
      - name: Run tests
        run: docker compose exec backend python manage.py test

      - name: Stop services
        if: always()
        run: docker compose down

  #--------------------------------------------------
  # JOB 2: Continuous Deployment (CD)
  # The purpose of this job is to build the final Docker image and push it to a registry.
  # It will only run if the "ci" job completes successfully.
  #--------------------------------------------------
  cd:
    # This sets the name of the job.
    name: Continuous Deployment

    # This job depends on the "ci" job. It will not start unless "ci" finishes successfully.
    # This is our safety gate: we only deploy code that has passed all tests.
    needs: ci

    # This job also runs on an Ubuntu machine.
    runs-on: ubuntu-latest

    # These are the steps for the deployment job.
    steps:
      # Step 1: Check out the code again
      # Each job runs on a fresh machine, so we need to check out the code again.
      - name: Check out code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      # This action securely logs into Docker Hub using secrets you will store in GitHub.
      # NEVER write your password directly in this file.
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Step 3: Build and push the production Docker image
      # This step builds your final image and pushes it to Docker Hub.
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/your-drf-api-project:${{ github.sha }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/your-drf-api-project:latest

      # --------------------------------------------------------------------
      # --- DEPLOYMENT TO SERVER (COMMENTED OUT) ---
      # The following steps are what you would use to deploy to a real server.
      # You will need to add secrets for your server's host, username, and SSH key.
      # --------------------------------------------------------------------

      # - name: Deploy to server
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.SERVER_HOST }}
      #     username: ${{ secrets.SERVER_USERNAME }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     script: |
      #       cd /path/to/your/project
      #       docker-compose pull
      #       docker-compose up -d --no-build
      #       docker-compose exec -T backend python manage.py migrate --noinput